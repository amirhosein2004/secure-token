name: CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.10", "3.11", "3.12"]

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e .[test]

    - name: Run tests
      run: |
        pytest

    - name: Upload coverage to Codecov
      if: matrix.python-version == '3.11'
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml

  publish:
    needs: test
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
        token: ${{ secrets.GITHUB_TOKEN }}

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build twine

    - name: Get version from pyproject.toml
      id: get_version
      run: |
        VERSION=$(python -c "import tomllib; print(tomllib.load(open('pyproject.toml', 'rb'))['project']['version'])")
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "tag=v$VERSION" >> $GITHUB_OUTPUT

    - name: Check if tag exists
      id: check_tag
      run: |
        if git rev-parse "v${{ steps.get_version.outputs.version }}" >/dev/null 2>&1; then
          echo "exists=true" >> $GITHUB_OUTPUT
        else
          echo "exists=false" >> $GITHUB_OUTPUT
        fi

    - name: Check if package exists on PyPI
      id: check_pypi
      run: |
        VERSION="${{ steps.get_version.outputs.version }}"
        HTTP_STATUS=$(curl -s -o /dev/null -w "%{http_code}" "https://pypi.org/pypi/secure-token/$VERSION/json")
        if [ "$HTTP_STATUS" = "200" ]; then
          echo "exists=true" >> $GITHUB_OUTPUT
          echo "⚠️ Package version $VERSION already exists on PyPI - skipping publish"
        else
          echo "exists=false" >> $GITHUB_OUTPUT
          echo "✅ Package version $VERSION not found on PyPI - proceeding with publish"
        fi

    - name: Skip publish - Package already exists
      if: steps.check_pypi.outputs.exists == 'true'
      run: |
        echo "🚫 Skipping PyPI publish: Package version ${{ steps.get_version.outputs.version }} already exists"
        echo "📦 Existing package: https://pypi.org/project/secure-token/${{ steps.get_version.outputs.version }}/"

    - name: Skip publish - Tag already exists
      if: steps.check_tag.outputs.exists == 'true'
      run: |
        echo "🚫 Skipping publish: Git tag v${{ steps.get_version.outputs.version }} already exists"

    - name: Build package
      if: steps.check_tag.outputs.exists == 'false' && steps.check_pypi.outputs.exists == 'false'
      run: |
        python -m build

    - name: Publish to PyPI
      if: steps.check_tag.outputs.exists == 'false' && steps.check_pypi.outputs.exists == 'false'
      env:
        TWINE_USERNAME: __token__
        TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}
      run: |
        twine upload dist/*

    - name: Create and push tag
      if: steps.check_tag.outputs.exists == 'false' && steps.check_pypi.outputs.exists == 'false'
      env:
        GITHUB_TOKEN: ${{ secrets.PAT_TOKEN }}
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git tag -a ${{ steps.get_version.outputs.tag }} -m "Release ${{ steps.get_version.outputs.tag }}"
        git push https://x-access-token:${GITHUB_TOKEN}@github.com/amirhosein2004/secure-token.git ${{ steps.get_version.outputs.tag }}
